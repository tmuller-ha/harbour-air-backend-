name: Aerospace Dev Deployment
env:
  HOST: ${{ secrets.HOST }}
  PORT: ${{ secrets.PORT }}
  APP_KEYS: ${{ secrets.APP_KEYS }}
  API_TOKEN_SALT: ${{ secrets.API_TOKEN_SALT }}
  ADMIN_JWT_SECRET: ${{ secrets.ADMIN_JWT_SECRET }}
  TRANSFER_TOKEN_SALT: ${{ secrets.TRANSFER_TOKEN_SALT }}
  DATABASE_CLIENT: ${{ secrets.DATABASE_CLIENT }}
  DATABASE_URL: ${{ secrets.AERO_DATABASE_URL }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_ACCESS_SECRET: ${{ secrets.AWS_ACCESS_SECRET }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  STRAPI_ADMIN_GITHUB_TOKEN: ${{ secrets.STRAPI_ADMIN_GITHUB_TOKEN }}
  WEB_PREVIEW_URL: ${{ secrets.WEB_PREVIEW_URL }}
  DEFAULT_FROM_EMAIL: ${{ secrets.DEFAULT_FROM_EMAIL }}
  DEFAULT_REPLY_TO_EMAIL: ${{ secrets.DEFAULT_REPLY_TO_EMAIL }}
  BLUESKY_BOOKING_SCHEDULES_API: ${{ secrets.BLUESKY_BOOKING_SCHEDULES_API }}
  BLUESKY_BOOKING_SCHEDULES_ID: ${{ secrets.BLUESKY_BOOKING_SCHEDULES_ID }}
  SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
  IMAGE_HANDLER_URL: ${{ secrets.IMAGE_HANDLER_URL }}
  ALGOLIA_APP_ID: ${{ secrets.ALGOLIA_APP_ID }}
  ALGOLIA_ADMIN_KEY: ${{ secrets.ALGOLIA_ADMIN_KEY }}
  RECAPTCHA_SECRET_KEY: ${{ secrets.RECAPTCHA_SECRET_KEY }}

on:
  workflow_dispatch:
  push:
    branches:
      - aerospace-main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20"

      - name: Install Yarn
        run: npm install -g yarn

      - name: Install dependencies
        run: yarn install

      - name: Build Strapi
        run: yarn build

  deploy_dev:
    runs-on: [self-hosted, aerospace]
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20"

      - name: Install pm2
        run: npm install pm2 -g

      - name: Create .env file
        run: |
          touch .env
          echo HOST=${{ secrets.HOST }} >> .env
          echo PORT=${{ secrets.PORT }} >> .env
          echo APP_KEYS=${{ secrets.APP_KEYS }} >> .env
          echo API_TOKEN_SALT=${{ secrets.API_TOKEN_SALT }} >> .env
          echo ADMIN_JWT_SECRET=${{ secrets.ADMIN_JWT_SECRET }} >> .env
          echo TRANSFER_TOKEN_SALT=${{ secrets.TRANSFER_TOKEN_SALT }} >> .env
          echo DATABASE_CLIENT=${{ secrets.DATABASE_CLIENT }} >> .env
          echo DATABASE_URL=${{ secrets.AERO_DATABASE_URL }} >> .env
          echo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} >> .env
          echo AWS_ACCESS_SECRET=${{ secrets.AWS_ACCESS_SECRET }} >> .env
          echo AWS_REGION=${{ secrets.AWS_REGION }} >> .env
          echo AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }} >> .env
          echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> .env
          echo STRAPI_ADMIN_GITHUB_TOKEN=${{ secrets.STRAPI_ADMIN_GITHUB_TOKEN }} >> .env
          echo WEB_PREVIEW_URL=${{ secrets.WEB_PREVIEW_URL }} >> .env
          echo DEFAULT_REPLY_TO_EMAIL=${{ secrets.DEFAULT_REPLY_TO_EMAIL }} >> .env
          echo DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }} >> .env
          echo BLUESKY_BOOKING_SCHEDULES_API=${{ secrets.BLUESKY_BOOKING_SCHEDULES_API }} >> .env
          echo BLUESKY_BOOKING_SCHEDULES_ID=${{ secrets.BLUESKY_BOOKING_SCHEDULES_ID }} >> .env
          echo SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }} >> .env
          echo IMAGE_HANDLER_URL=${{ secrets.IMAGE_HANDLER_URL }} >> .env
          echo ALGOLIA_APP_ID=${{ secrets.ALGOLIA_APP_ID }} >> .env
          echo ALGOLIA_ADMIN_KEY=${{ secrets.ALGOLIA_ADMIN_KEY }} >> .env
          echo RECAPTCHA_SECRET_KEY=${{ secrets.RECAPTCHA_SECRET_KEY }} >> .env

      - name: Stop Strapi with PM2
        run: pm2 stop strapi

      - name: Install Yarn
        run: npm install -g yarn

      - name: Install dependencies
        run: yarn install
      
      - name: Perform API call
        id: api-call
        run: |
          response=$(curl -s "$NEXT_PUBLIC_CMS_LINK/api/trigger-build")
          echo "RESPONSE=$response" >> $GITHUB_ENV
          isTriggerBuild=$(echo "$response" | jq -r '.isTriggerBuild')
          echo "::set-output name=isTriggerBuild::$isTriggerBuild"

      - name: Check API response
        id: check-api-response
        run: |
          if [[ "${{ steps.api-call.outputs.isTriggerBuild }}" == "true" ]]; then
            echo "isTriggerBuild is true. Continuing workflow."
          else
            echo "isTriggerBuild is false. Skipping remaining steps."
          fi
      
      - name: Delete .next folder
        if: ${{ steps.api-call.outputs.isTriggerBuild == 'true' }}
        run: rm -rf .next

      - name: Build Next.js application
        if: ${{ steps.api-call.outputs.isTriggerBuild == 'true' }}
        env:
          ENVIORNMENT: dev
        run: yarn build

      - name: Sync build to S3
        if: ${{ steps.api-call.outputs.isTriggerBuild == 'true' }}
        run: |
          aws s3 sync ./out/ s3://$NEXT_PUBLIC_S3_BUCKET_NAME

      - name: Notify CMS of successful build
        if: ${{ steps.api-call.outputs.isTriggerBuild == 'true' }}
        run: |
          curl -s "$NEXT_PUBLIC_CMS_LINK/api/trigger-build/false"

      - name: Trigger PUT API call on failure
        if: ${{ failure() }}
        run: |
          curl -X PUT -H "Content-Type: application/json" -d '{"id": ${{ github.event.inputs.id }} , "status": "Failed"}' "$NEXT_PUBLIC_CMS_LINK/api/web-deployment/deployment"

      - name: Trigger PUT API call on success
        if: ${{ success() }}
        run: |
          curl -X PUT -H "Content-Type: application/json" -d '{"id": ${{ github.event.inputs.id }} , "status": "Deployed"}' "$NEXT_PUBLIC_CMS_LINK/api/web-deployment/deployment"


      - name: Build Strapi
        run: yarn build

      - name: Start Strapi with PM2
        run: pm2 restart strapi
